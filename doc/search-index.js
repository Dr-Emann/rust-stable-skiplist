var searchIndex = {};
searchIndex["stable_skiplist"] = {"doc":"A skiplist is a way of storing elements in such a way that elements can be efficiently\naccessed, inserted and removed, all in `O(log(n))` on average.","items":[[4,"Bound","stable_skiplist","An endpoint of a range of keys.",null,null],[13,"Included","","An inclusive bound.",0,null],[13,"Excluded","","An exclusive bound.",0,null],[13,"Unbounded","","An infinite endpoint. Indicates that there is no bound in this direction.",0,null],[0,"ordered_skiplist","","",null,null],[3,"OrderedSkipList","stable_skiplist::ordered_skiplist","The ordered skiplist provides a way of storing elements such that they are always\nsorted and at the same time provides efficient way to access, insert and remove nodes.\nJust like `SkipList`, it also provides access to indices.",null,null],[3,"Iter","","",null,null],[3,"IntoIter","","",null,null],[11,"new","","Create a new skiplist with the default default comparison function of `|&amp;a, &amp;b|\na.cmp(b).unwrap()` and the default number of 16 levels.  As a result, any element which\ncannot be ordered will cause insertion to panic.",1,{"inputs":[],"output":{"name":"self"}}],[11,"with_capacity","","Constructs a new, empty skiplist with the optimal number of levels for the intended\ncapacity.  Specifically, it uses `floor(log2(capacity))` number of levels, ensuring that\nonly *a few* nodes occupy the highest level.",1,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"with_comp","","Create a new skiplist using the provided function in order to determine the ordering of\nelements within the list.  It will be generated with 16 levels.",1,{"inputs":[{"name":"f"}],"output":{"name":"self"}}],[11,"sort_by","","Change the method which determines the ordering of the elements in the skiplist.",1,{"inputs":[{"name":"orderedskiplist"},{"name":"f"}],"output":null}],[11,"clear","","Clears the skiplist, removing all values.",1,{"inputs":[{"name":"orderedskiplist"}],"output":null}],[11,"len","","Returns the number of elements in the skiplist.",1,{"inputs":[{"name":"orderedskiplist"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns `true` if the skiplist contains no elements.",1,{"inputs":[{"name":"orderedskiplist"}],"output":{"name":"bool"}}],[11,"insert","","Insert the element into the skiplist.",1,{"inputs":[{"name":"orderedskiplist"},{"name":"t"}],"output":null}],[11,"front","","Provides a reference to the front element, or `None` if the skiplist is empty.",1,{"inputs":[{"name":"orderedskiplist"}],"output":{"name":"option"}}],[11,"back","","Provides a reference to the back element, or `None` if the skiplist is empty.",1,{"inputs":[{"name":"orderedskiplist"}],"output":{"name":"option"}}],[11,"get","","Provides a reference to the element at the given index, or `None` if the skiplist is empty\nor the index is out of bounds.",1,{"inputs":[{"name":"orderedskiplist"},{"name":"usize"}],"output":{"name":"option"}}],[11,"pop_front","","Removes the first element and returns it, or `None` if the sequence is empty.",1,{"inputs":[{"name":"orderedskiplist"}],"output":{"name":"option"}}],[11,"pop_back","","Removes the last element and returns it, or `None` if the sequence is empty.",1,{"inputs":[{"name":"orderedskiplist"}],"output":{"name":"option"}}],[11,"contains","","Returns true if the value is contained in the skiplist.",1,{"inputs":[{"name":"orderedskiplist"},{"name":"t"}],"output":{"name":"bool"}}],[11,"remove","","Removes and returns an element with the same value or None if there are no such values in\nthe skiplist.",1,{"inputs":[{"name":"orderedskiplist"},{"name":"t"}],"output":{"name":"option"}}],[11,"remove_first","","Removes and returns an element with the same value or None if there are no such values in\nthe skiplist.",1,{"inputs":[{"name":"orderedskiplist"},{"name":"t"}],"output":{"name":"option"}}],[11,"remove_index","","Removes and returns an element with the given index.",1,{"inputs":[{"name":"orderedskiplist"},{"name":"usize"}],"output":{"name":"t"}}],[11,"retain","","Retains only the elements specified by the predicate.",1,{"inputs":[{"name":"orderedskiplist"},{"name":"f"}],"output":null}],[11,"dedup","","Removes all repeated elements in the skiplist using the skiplist&#39;s comparison function.",1,{"inputs":[{"name":"orderedskiplist"}],"output":null}],[11,"into_iter","","Get an owning iterator over the entries of the skiplist.",1,{"inputs":[{"name":"orderedskiplist"}],"output":{"name":"intoiter"}}],[11,"iter","","Creates an iterator over the entries of the skiplist.",1,{"inputs":[{"name":"orderedskiplist"}],"output":{"name":"iter"}}],[11,"range","","Constructs a double-ended iterator over a sub-range of elements in the skiplist, starting\nat min, and ending at max. If min is `Unbounded`, then it will be treated as &quot;negative\ninfinity&quot;, and if max is `Unbounded`, then it will be treated as &quot;positive infinity&quot;.  Thus\nrange(Unbounded, Unbounded) will yield the whole collection.",1,{"inputs":[{"name":"orderedskiplist"},{"name":"bound"},{"name":"bound"}],"output":{"name":"iter"}}],[11,"drop","","",1,{"inputs":[{"name":"orderedskiplist"}],"output":null}],[11,"default","","",1,{"inputs":[],"output":{"name":"orderedskiplist"}}],[11,"eq","","",1,{"inputs":[{"name":"orderedskiplist"},{"name":"orderedskiplist"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"orderedskiplist"},{"name":"orderedskiplist"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"orderedskiplist"},{"name":"orderedskiplist"}],"output":{"name":"option"}}],[11,"cmp","","",1,{"inputs":[{"name":"orderedskiplist"},{"name":"orderedskiplist"}],"output":{"name":"ordering"}}],[11,"extend","","",1,{"inputs":[{"name":"orderedskiplist"},{"name":"i"}],"output":null}],[11,"index","","",1,{"inputs":[{"name":"orderedskiplist"},{"name":"usize"}],"output":{"name":"t"}}],[11,"fmt","","",1,{"inputs":[{"name":"orderedskiplist"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"orderedskiplist"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"into_iter","","",1,{"inputs":[{"name":"orderedskiplist"}],"output":{"name":"intoiter"}}],[11,"from_iter","","",1,{"inputs":[{"name":"i"}],"output":{"name":"orderedskiplist"}}],[11,"hash","","",1,{"inputs":[{"name":"orderedskiplist"},{"name":"h"}],"output":null}],[11,"next","","",2,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",2,null],[11,"next_back","","",2,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"next","","",3,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",3,null],[11,"next_back","","",3,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[0,"skipmap","stable_skiplist","",null,null],[3,"SkipMap","stable_skiplist::skipmap","The skipmap provides a way of storing element pairs such that they keys are always sorted\nwhilst at the same time providing efficient way to access, insert and removes nodes.",null,null],[3,"Iter","","",null,null],[3,"IterMut","","",null,null],[3,"IntoIter","","",null,null],[3,"Keys","","",null,null],[3,"Values","","",null,null],[11,"new","","Create a new skipmap with the default number of 16 levels.",4,{"inputs":[],"output":{"name":"self"}}],[11,"with_capacity","","Constructs a new, empty skipmap with the optimal number of levels for the intended\ncapacity.  Specifically, it uses `floor(log2(capacity))` number of levels, ensuring that\nonly *a few* nodes occupy the highest level.",4,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"insert","","Insert the element into the skipmap.",4,{"inputs":[{"name":"skipmap"},{"name":"k"},{"name":"v"}],"output":{"name":"option"}}],[11,"clear","","Clears the skipmap, removing all values.",4,{"inputs":[{"name":"skipmap"}],"output":null}],[11,"len","","Returns the number of elements in the skipmap.",4,{"inputs":[{"name":"skipmap"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns `true` if the skipmap contains no elements.",4,{"inputs":[{"name":"skipmap"}],"output":{"name":"bool"}}],[11,"front","","Provides a reference to the front element, or `None` if the skipmap is empty.",4,{"inputs":[{"name":"skipmap"}],"output":{"name":"option"}}],[11,"front_mut","","Provides a mutable reference to the front element, or `None` if the skipmap is empty.",4,{"inputs":[{"name":"skipmap"}],"output":{"name":"option"}}],[11,"back","","Provides a reference to the back element, or `None` if the skipmap is empty.",4,{"inputs":[{"name":"skipmap"}],"output":{"name":"option"}}],[11,"back_mut","","Provides a reference to the back element, or `None` if the skipmap is empty.",4,{"inputs":[{"name":"skipmap"}],"output":{"name":"option"}}],[11,"get","","Provides a reference to the element at the given index, or `None` if the skipmap is empty\nor the index is out of bounds.",4,{"inputs":[{"name":"skipmap"},{"name":"q"}],"output":{"name":"option"}}],[11,"get_mut","","Provides a reference to the element at the given index, or `None` if the skipmap is empty\nor the index is out of bounds.",4,{"inputs":[{"name":"skipmap"},{"name":"q"}],"output":{"name":"option"}}],[11,"pop_front","","Removes the first element and returns it, or `None` if the sequence is empty.",4,{"inputs":[{"name":"skipmap"}],"output":{"name":"option"}}],[11,"pop_back","","Removes the last element and returns it, or `None` if the sequence is empty.",4,{"inputs":[{"name":"skipmap"}],"output":{"name":"option"}}],[11,"contains_key","","Returns true if the value is contained in the skipmap.",4,{"inputs":[{"name":"skipmap"},{"name":"q"}],"output":{"name":"bool"}}],[11,"remove","","Removes and returns an element with the same value or None if there are no such values in\nthe skipmap.",4,{"inputs":[{"name":"skipmap"},{"name":"q"}],"output":{"name":"option"}}],[11,"remove_index","","Removes and returns an element with the given index.",4,null],[11,"into_iter","","Get an owning iterator over the entries of the skipmap.",4,{"inputs":[{"name":"skipmap"}],"output":{"name":"intoiter"}}],[11,"iter","","Creates an iterator over the entries of the skipmap.",4,{"inputs":[{"name":"skipmap"}],"output":{"name":"iter"}}],[11,"iter_mut","","Creates an mutable iterator over the entries of the skipmap.",4,{"inputs":[{"name":"skipmap"}],"output":{"name":"itermut"}}],[11,"keys","","Creates an iterator over the keys of the skipmap.",4,{"inputs":[{"name":"skipmap"}],"output":{"name":"keys"}}],[11,"values","","Creates an iterator over the values of the skipmap.",4,{"inputs":[{"name":"skipmap"}],"output":{"name":"values"}}],[11,"range","","Constructs a double-ended iterator over a sub-range of elements in the skipmap, starting\nat min, and ending at max. If min is `Unbounded`, then it will be treated as &quot;negative\ninfinity&quot;, and if max is `Unbounded`, then it will be treated as &quot;positive infinity&quot;.  Thus\nrange(Unbounded, Unbounded) will yield the whole collection.",4,{"inputs":[{"name":"skipmap"},{"name":"bound"},{"name":"bound"}],"output":{"name":"iter"}}],[11,"drop","","",4,{"inputs":[{"name":"skipmap"}],"output":null}],[11,"default","","",4,{"inputs":[],"output":{"name":"skipmap"}}],[11,"eq","","",4,{"inputs":[{"name":"skipmap"},{"name":"skipmap"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"skipmap"},{"name":"skipmap"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",4,{"inputs":[{"name":"skipmap"},{"name":"skipmap"}],"output":{"name":"option"}}],[11,"cmp","","",4,{"inputs":[{"name":"skipmap"},{"name":"skipmap"}],"output":{"name":"ordering"}}],[11,"extend","","",4,{"inputs":[{"name":"skipmap"},{"name":"i"}],"output":null}],[11,"index","","",4,{"inputs":[{"name":"skipmap"},{"name":"usize"}],"output":{"name":"v"}}],[11,"index_mut","","",4,{"inputs":[{"name":"skipmap"},{"name":"usize"}],"output":{"name":"v"}}],[11,"fmt","","",4,{"inputs":[{"name":"skipmap"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",4,{"inputs":[{"name":"skipmap"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"into_iter","","",4,{"inputs":[{"name":"skipmap"}],"output":{"name":"intoiter"}}],[11,"from_iter","","",4,{"inputs":[{"name":"i"}],"output":{"name":"skipmap"}}],[11,"hash","","",4,{"inputs":[{"name":"skipmap"},{"name":"h"}],"output":null}],[11,"next","","",5,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",5,null],[11,"next_back","","",5,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"next","","",6,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"size_hint","","",6,null],[11,"next_back","","",6,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"next","","",7,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",7,null],[11,"next_back","","",7,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"next","","",8,{"inputs":[{"name":"keys"}],"output":{"name":"option"}}],[11,"size_hint","","",8,null],[11,"next_back","","",8,{"inputs":[{"name":"keys"}],"output":{"name":"option"}}],[11,"next","","",9,{"inputs":[{"name":"values"}],"output":{"name":"option"}}],[11,"size_hint","","",9,null],[11,"next_back","","",9,{"inputs":[{"name":"values"}],"output":{"name":"option"}}],[0,"skiplist","stable_skiplist","",null,null],[3,"SkipList","stable_skiplist::skiplist","SkipList provides a way of storing elements and provides efficient way to access, insert and\nremove nodes.",null,null],[3,"Iter","","",null,null],[3,"IterMut","","",null,null],[3,"IntoIter","","",null,null],[11,"new","","Create a new skiplist with the default number of 16 levels.",10,{"inputs":[],"output":{"name":"self"}}],[11,"with_capacity","","Constructs a new, empty skiplist with the optimal number of levels for the intended\ncapacity.  Specifically, it uses `floor(log2(capacity))` number of levels, ensuring that\nonly *a few* nodes occupy the highest level.",10,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"clear","","Clears the skiplist, removing all values.",10,{"inputs":[{"name":"skiplist"}],"output":null}],[11,"len","","Returns the number of elements in the skiplist.",10,{"inputs":[{"name":"skiplist"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns `true` if the skiplist contains no elements.",10,{"inputs":[{"name":"skiplist"}],"output":{"name":"bool"}}],[11,"insert","","Insert the element into the skiplist at the given index, shifting all subsequent nodes down.",10,{"inputs":[{"name":"skiplist"},{"name":"t"},{"name":"usize"}],"output":null}],[11,"push_front","","Insert the element into the front of the skiplist.",10,{"inputs":[{"name":"skiplist"},{"name":"t"}],"output":null}],[11,"push_back","","Insert the element into the back of the skiplist.",10,{"inputs":[{"name":"skiplist"},{"name":"t"}],"output":null}],[11,"front","","Provides a reference to the front element, or `None` if the skiplist is empty.",10,{"inputs":[{"name":"skiplist"}],"output":{"name":"option"}}],[11,"front_mut","","Provides a mutable reference to the front element, or `None` if the skiplist is empty.",10,{"inputs":[{"name":"skiplist"}],"output":{"name":"option"}}],[11,"back","","Provides a reference to the back element, or `None` if the skiplist is empty.",10,{"inputs":[{"name":"skiplist"}],"output":{"name":"option"}}],[11,"back_mut","","Provides a reference to the back element, or `None` if the skiplist is empty.",10,{"inputs":[{"name":"skiplist"}],"output":{"name":"option"}}],[11,"get","","Provides a reference to the element at the given index, or `None` if the skiplist is empty\nor the index is out of bounds.",10,{"inputs":[{"name":"skiplist"},{"name":"usize"}],"output":{"name":"option"}}],[11,"get_mut","","Provides a mutable reference to the element at the given index, or `None` if the skiplist\nis empty or the index is out of bounds.",10,{"inputs":[{"name":"skiplist"},{"name":"usize"}],"output":{"name":"option"}}],[11,"pop_front","","Removes the first element and returns it, or `None` if the sequence is empty.",10,{"inputs":[{"name":"skiplist"}],"output":{"name":"option"}}],[11,"pop_back","","Removes the last element and returns it, or `None` if the sequence is empty.",10,{"inputs":[{"name":"skiplist"}],"output":{"name":"option"}}],[11,"remove","","Removes and returns an element with the given index.",10,{"inputs":[{"name":"skiplist"},{"name":"usize"}],"output":{"name":"t"}}],[11,"retain","","Retains only the elements specified by the predicate.",10,{"inputs":[{"name":"skiplist"},{"name":"f"}],"output":null}],[11,"into_iter","","Get an owning iterator over the entries of the skiplist.",10,{"inputs":[{"name":"skiplist"}],"output":{"name":"intoiter"}}],[11,"iter","","Creates an iterator over the entries of the skiplist.",10,{"inputs":[{"name":"skiplist"}],"output":{"name":"iter"}}],[11,"iter_mut","","Creates an mutable iterator over the entries of the skiplist.",10,{"inputs":[{"name":"skiplist"}],"output":{"name":"itermut"}}],[11,"range","","Constructs a double-ended iterator over a sub-range of elements in the skiplist, starting\nat min, and ending at max. If min is `Unbounded`, then it will be treated as &quot;negative\ninfinity&quot;, and if max is `Unbounded`, then it will be treated as &quot;positive infinity&quot;.  Thus\nrange(Unbounded, Unbounded) will yield the whole collection.",10,{"inputs":[{"name":"skiplist"},{"name":"bound"},{"name":"bound"}],"output":{"name":"iter"}}],[11,"range_mut","","Constructs a mutable double-ended iterator over a sub-range of elements in the skiplist,\nstarting at min, and ending at max. If min is `Unbounded`, then it will be treated as\n&quot;negative infinity&quot;, and if max is `Unbounded`, then it will be treated as &quot;positive\ninfinity&quot;.  Thus range(Unbounded, Unbounded) will yield the whole collection.",10,{"inputs":[{"name":"skiplist"},{"name":"bound"},{"name":"bound"}],"output":{"name":"itermut"}}],[11,"contains","","Returns true if the value is contained in the skiplist.",10,{"inputs":[{"name":"skiplist"},{"name":"t"}],"output":{"name":"bool"}}],[11,"dedup","","Removes all consecutive repeated elements in the skiplist.",10,{"inputs":[{"name":"skiplist"}],"output":null}],[11,"drop","","",10,{"inputs":[{"name":"skiplist"}],"output":null}],[11,"default","","",10,{"inputs":[],"output":{"name":"skiplist"}}],[11,"eq","","",10,{"inputs":[{"name":"skiplist"},{"name":"skiplist"}],"output":{"name":"bool"}}],[11,"ne","","",10,{"inputs":[{"name":"skiplist"},{"name":"skiplist"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",10,{"inputs":[{"name":"skiplist"},{"name":"skiplist"}],"output":{"name":"option"}}],[11,"cmp","","",10,{"inputs":[{"name":"skiplist"},{"name":"skiplist"}],"output":{"name":"ordering"}}],[11,"extend","","",10,{"inputs":[{"name":"skiplist"},{"name":"i"}],"output":null}],[11,"index","","",10,{"inputs":[{"name":"skiplist"},{"name":"usize"}],"output":{"name":"t"}}],[11,"fmt","","",10,{"inputs":[{"name":"skiplist"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",10,{"inputs":[{"name":"skiplist"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"into_iter","","",10,{"inputs":[{"name":"skiplist"}],"output":{"name":"intoiter"}}],[11,"from_iter","","",10,{"inputs":[{"name":"i"}],"output":{"name":"skiplist"}}],[11,"hash","","",10,{"inputs":[{"name":"skiplist"},{"name":"h"}],"output":null}],[11,"next","","",11,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",11,null],[11,"next_back","","",11,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"next","","",12,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"size_hint","","",12,null],[11,"next_back","","",12,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"next","","",13,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",13,null],[11,"next_back","","",13,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"eq","stable_skiplist","",0,{"inputs":[{"name":"bound"},{"name":"bound"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"bound"},{"name":"bound"}],"output":{"name":"bool"}}],[11,"hash","","",0,null],[11,"fmt","","",0,{"inputs":[{"name":"bound"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"bound"}],"output":{"name":"bound"}}]],"paths":[[4,"Bound"],[3,"OrderedSkipList"],[3,"Iter"],[3,"IntoIter"],[3,"SkipMap"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Keys"],[3,"Values"],[3,"SkipList"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"]]};
initSearch(searchIndex);
